'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _admin = require('../ethereum/admin');

var _admin2 = _interopRequireDefault(_admin);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\karan karmakar\\deCovid\\pages\\hospitalList.js?entry';


var hospitalList = function (_React$Component) {
    (0, _inherits3.default)(hospitalList, _React$Component);

    function hospitalList() {
        (0, _classCallCheck3.default)(this, hospitalList);

        return (0, _possibleConstructorReturn3.default)(this, (hospitalList.__proto__ || (0, _getPrototypeOf2.default)(hospitalList)).apply(this, arguments));
    }

    (0, _createClass3.default)(hospitalList, [{
        key: 'renderHospitals',
        value: function renderHospitals() {
            var items = this.props.hospitals.map(function (address) {
                return {
                    header: address,
                    description: _react2.default.createElement(_routes.Link, { route: '/hospitals/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 17
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 18
                        }
                    }, 'view hospital')),
                    fluid: true
                };
            });
            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 24
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 30
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 32
                }
            }, 'Open Charity'), _react2.default.createElement(_semanticUiReact.Button, {
                style: { marginTop: '10px' },
                content: 'Register As hospital',
                icon: 'share square',
                color: 'grey',
                floated: 'right',
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            }), this.renderHospitals()), ';');
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var hospitals;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _admin2.default.methods.getRegisterdHospital().call();

                            case 2:
                                hospitals = _context.sent;
                                return _context.abrupt('return', { hospitals: hospitals });

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps() {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return hospitalList;
}(_react2.default.Component);

exports.default = hospitalList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiaG9zcGl0YWxMaXN0IiwiX1JlYWN0JENvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJIb3NwaXRhbHMiLCJpdGVtcyIsInByb3BzIiwiaG9zcGl0YWxzIiwibWFwIiwiYWRkcmVzcyIsImhlYWRlciIsImRlc2NyaXB0aW9uIiwiY3JlYXRlRWxlbWVudCIsInJvdXRlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJmbHVpZCIsIkdyb3VwIiwicmVuZGVyIiwic3R5bGUiLCJtYXJnaW5Ub3AiLCJjb250ZW50IiwiaWNvbiIsImNvbG9yIiwiZmxvYXRlZCIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJtZXRob2RzIiwiZ2V0UmVnaXN0ZXJkSG9zcGl0YWwiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFMQSxJQUFJQSxlQUFlLGtFQUFuQjs7O0FBT0EsSUFBSUMsZUFBZSxVQUFVQyxnQkFBVixFQUE0QjtBQUMzQyw0QkFBVUQsWUFBVixFQUF3QkMsZ0JBQXhCOztBQUVBLGFBQVNELFlBQVQsR0FBd0I7QUFDcEIsc0NBQWdCLElBQWhCLEVBQXNCQSxZQUF0Qjs7QUFFQSxlQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxhQUFhRSxTQUFiLElBQTBCLDhCQUF1QkYsWUFBdkIsQ0FBM0IsRUFBaUVHLEtBQWpFLENBQXVFLElBQXZFLEVBQTZFQyxTQUE3RSxDQUFqQyxD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