'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _admin = require('../../ethereum/admin');

var _admin2 = _interopRequireDefault(_admin);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\karan karmakar\\deCovid\\pages\\hospitals\\register.js?entry';


var hospitalRegister = function (_React$Component) {
    (0, _inherits3.default)(hospitalRegister, _React$Component);

    function hospitalRegister() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, hospitalRegister);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = hospitalRegister.__proto__ || (0, _getPrototypeOf2.default)(hospitalRegister)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            nameHospital: '',
            addressHospital: '',
            noPaitients: '',
            errorMessage: '',
            loading: false
        }, _this.onSubmit = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();
                                _this.setState({ loading: true, errorMessage: '' });

                                _context.prev = 2;
                                _context.next = 5;
                                return _web2.default.eth.getAccounts();

                            case 5:
                                accounts = _context.sent;
                                _context.next = 8;
                                return _admin2.default.methods.RegisterHospital(_this.state.nameHospital, _this.state.addressHospital, _this.state.noPaitients).send({
                                    from: accounts[0]
                                });

                            case 8:
                                _routes.Router.pushRoute('/hospitalList');
                                _context.next = 14;
                                break;

                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context['catch'](2);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 14:
                                _this.setState({ loading: false });

                            case 15:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[2, 11]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(hospitalRegister, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, ' Register your Hospital'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, 'Name Of The Hospital'), _react2.default.createElement('input', {
                placeholder: 'name',
                value: this.state.nameHospital,
                onChange: function onChange(event) {
                    return _this3.setState({ nameHospital: event.target.value });
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            })), _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }, 'Address'), _react2.default.createElement('input', {
                placeholder: 'Location',
                value: this.state.addressHospital,
                onChange: function onChange(event) {
                    return _this3.setState({ addressHospital: event.target.value });
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            })), _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 59
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            }, 'Number Of Covid Paitients'), _react2.default.createElement('input', {
                placeholder: 'number',
                value: this.state.noPaitients,
                onChange: function onChange(event) {
                    return _this3.setState({ noPaitients: event.target.value });
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            })), _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 68
                }
            }, _react2.default.createElement(_semanticUiReact.Checkbox, { label: 'I agree to the Terms and Conditions', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 69
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops! something went wrong', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { type: 'submit', secondary: true, loading: this.state.loading, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                }
            }, 'Submit')));
        }
    }]);

    return hospitalRegister;
}(_react2.default.Component);

exports.default = hospitalRegister;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiaG9zcGl0YWxSZWdpc3RlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwibmFtZUhvc3BpdGFsIiwiYWRkcmVzc0hvc3BpdGFsIiwibm9QYWl0aWVudHMiLCJlcnJvck1lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsIlJlZ2lzdGVySG9zcGl0YWwiLCJzZW5kIiwiZnJvbSIsInB1c2hSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZXJyb3IiLCJGaWVsZCIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJsYWJlbCIsImhlYWRlciIsImNvbnRlbnQiLCJ0eXBlIiwic2Vjb25kYXJ5IiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFOQSxJQUFJQSxlQUFlLHlFQUFuQjs7O0FBUUEsSUFBSUMsbUJBQW1CLFVBQVVDLGdC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O0FBRk47QUFEZCxhQUZKLEVBUUksZ0JBQU1ILGFBQU4sQ0FDSSxPQURKLEVBRUk7QUFDSUMsMEJBQVU7QUFDTkMsOEJBQVV2RCxZQURKO0FBRU53RCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLDJCQVJKLENBUkosRUFrQkksZ0JBQU1ILGFBQU4sQ0FBb0IsT0FBcEIsRUFBNkI7QUFDekJNLDZCQUFhLFFBRFk7QUFFekJULHVCQUFPLEtBQUtoQyxLQUFMLENBQVdHLFdBRk87QUFHekJ1QywwQkFBVSxTQUFTQSxRQUFULENBQWtCaEMsS0FBbEIsRUFBeUI7QUFDL0IsMkJBQU93QixPQUFPaEIsUUFBUCxDQUFnQixFQUFFZixhQUFhTyxNQUFNaUMsTUFBTixDQUFhWCxLQUE1QixFQUFoQixDQUFQO0FBQ0gsaUJBTHdCO0FBTXpCSSwwQkFBVTtBQUNOQyw4QkFBVXZELFlBREo7QUFFTndELGdDQUFZO0FBRk47QUFOZSxhQUE3QixDQWxCSixDQW5FSixFQWlHSSxnQkFBTUgsYUFBTixDQUNJLHNCQUFLSyxLQURULEVBRUk7QUFDSUosMEJBQVU7QUFDTkMsOEJBQVV2RCxZQURKO0FBRU53RCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLGdCQUFNSCxhQUFOLDRCQUE4QixFQUFFUyxPQUFPLHFDQUFULEVBQWdEUixVQUFVO0FBQ2hGQyw4QkFBVXZELFlBRHNFO0FBRWhGd0QsZ0NBQVk7QUFGb0U7QUFBMUQsYUFBOUIsQ0FSSixDQWpHSixFQStHSSxnQkFBTUgsYUFBTiwyQkFBNkIsRUFBRUksT0FBTyxJQUFULEVBQWVNLFFBQVEsNEJBQXZCLEVBQXFEQyxTQUFTLEtBQUs5QyxLQUFMLENBQVdJLFlBQXpFLEVBQXVGZ0MsVUFBVTtBQUN0SEMsOEJBQVV2RCxZQUQ0RztBQUV0SHdELGdDQUFZO0FBRjBHO0FBQWpHLGFBQTdCLENBL0dKLEVBb0hJLGdCQUFNSCxhQUFOLDBCQUVJLEVBQUVZLE1BQU0sUUFBUixFQUFrQkMsV0FBVyxJQUE3QixFQUFtQzNDLFNBQVMsS0FBS0wsS0FBTCxDQUFXSyxPQUF2RCxFQUFnRStCLFVBQVU7QUFDbEVDLDhCQUFVdkQsWUFEd0Q7QUFFbEV3RCxnQ0FBWTtBQUZzRDtBQUExRSxhQUZKLEVBT0ksUUFQSixDQXBISixDQWxCRyxDQUFQO0FBaUpIO0FBdEoyQixLQUFELENBQS9COztBQXlKQSxXQUFPdkQsZ0JBQVA7QUFDSCxDQWhPc0IsQ0FnT3JCLGdCQUFNa0UsU0FoT2UsQ0FBdkI7O2tCQWtPZWxFLGdCIiwiZmlsZSI6InVua25vd24ifQ==