'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _hospital = require('../../../ethereum/hospital');

var _hospital2 = _interopRequireDefault(_hospital);

var _RequestRow = require('../../../components/RequestRow');

var _RequestRow2 = _interopRequireDefault(_RequestRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\karan karmakar\\deCovid\\pages\\hospitals\\requests\\index.js?entry';


var RequestIndex = function (_React$Component) {
    (0, _inherits3.default)(RequestIndex, _React$Component);

    function RequestIndex() {
        (0, _classCallCheck3.default)(this, RequestIndex);

        return (0, _possibleConstructorReturn3.default)(this, (RequestIndex.__proto__ || (0, _getPrototypeOf2.default)(RequestIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(RequestIndex, [{
        key: 'renderRows',
        value: function renderRows() {
            var _this2 = this;

            return this.props.requests.map(function (request, index) {
                return _react2.default.createElement(_RequestRow2.default, {
                    key: index,
                    id: index,
                    request: request,
                    address: _this2.props.address,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 26
                    }
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var Header = _semanticUiReact.Table.Header,
                Row = _semanticUiReact.Table.Row,
                HeaderCell = _semanticUiReact.Table.HeaderCell,
                Body = _semanticUiReact.Table.Body;

            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, 'Requests'), _react2.default.createElement(_semanticUiReact.Table, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            }, _react2.default.createElement(Header, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                }
            }, _react2.default.createElement(Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }, 'ID'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, 'Description'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, 'Amount'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }, 'Recipent'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            }, 'Approve'))), _react2.default.createElement(Body, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }, this.renderRows())), _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            }, 'Found ', this.props.requestCount, ' requests'));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var address, hospital, requestCount, requests;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                address = props.query.address;
                                hospital = (0, _hospital2.default)(address);
                                _context.next = 4;
                                return hospital.methods.getRequestCount().call();

                            case 4:
                                requestCount = _context.sent;
                                _context.next = 7;
                                return _promise2.default.all(Array(parseInt(requestCount)).fill().map(function (element, index) {
                                    return hospital.methods.requests(index).call();
                                }));

                            case 7:
                                requests = _context.sent;
                                return _context.abrupt('return', { address: address, requests: requests, requestCount: requestCount });

                            case 9:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return RequestIndex;
}(_react2.default.Component);

exports.default = RequestIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdEluZGV4IiwiX1JlYWN0JENvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJSb3dzIiwiX3RoaXMyIiwicHJvcHMiLCJyZXF1ZXN0cyIsIm1hcCIsInJlcXVlc3QiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJlbmRlciIsIkhlYWRlciIsIlJvdyIsIkhlYWRlckNlbGwiLCJCb2R5IiwicmVxdWVzdENvdW50IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiaG9zcGl0YWwiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicXVlcnkiLCJtZXRob2RzIiwiZ2V0UmVxdWVzdENvdW50IiwiY2FsbCIsInNlbnQiLCJhbGwiLCJBcnJheSIsInBhcnNlSW50IiwiZmlsbCIsImVsZW1lbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBTkEsSUFBSUEsZUFBZSxnRkFBbkI7OztBQVFBLElBQUlDLGVBQWUsVUFBVUMsZ0JBQVYsRUFBNEI7QUFDM0MsNEJBQVVELFlBQVYsRUFBd0JDLGdCQUF4Qjs7QUFFQSxhQUFTRCxZQUFULEdBQXdCO0FBQ3BCLHNDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FBRUEsZUFBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsYUFBYUUsU0FBYixJQUEwQiw4QkFBdUJGLFlBQXZCLENBQTNCLEVBQWlFRyxLQUFqRSxDQUF1RSxJQUF2RSxFQUE2RUMsU0FBN0UsQ0FBakMsQ0FBUDtBQUNIOztBQUVELCtCQUFhSixZQUFiLEVBQTJCLENBQUM7QUFDeEJLLGFBQUssWUFEbUI7QUFFeEJDLGVBQU8sU0FBU0MsVUFBVCxHQUFzQjtBQUN6QixnQkFBSUMsU0FBUyxJQUFiOztBQUVBLG1CQUFPLEtBQUtDLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkMsR0FBcEIsQ0FBd0IsVUFBVUMsT0FBVixFQUFtQkMsS0FBbkIsRUFBMEI7QUFDckQsdUJBQU8sZ0JBQU1DLGFBQU4sdUJBQWdDO0FBQ25DVCx5QkFBS1EsS0FEOEI7QUFFbkNFLHdCQUFJRixLQUYrQjtBQUduQ0QsNkJBQVNBLE9BSDBCO0FBSW5DSSw2QkFBU1IsT0FBT0MsS0FBUCxDQUFhTyxPQUphO0FBS25DQyw4QkFBVTtBQUNOQyxrQ0FBVW5CLFlBREo7QUFFTm9CLG9DQUFZO0FBRk47QUFMeUIsaUJBQWhDLENBQVA7QUFVSCxhQVhNLENBQVA7QUFZSDtBQWpCdUIsS0FBRCxFQWtCeEI7QUFDQ2QsYUFBSyxRQUROO0FBRUNDLGVBQU8sU0FBU2MsTUFBVCxHQUFrQjtBQUNyQixnQkFBSUMsU0FBUyx1QkFBTUEsTUFBbkI7QUFBQSxnQkFDSUMsTUFBTSx1QkFBTUEsR0FEaEI7QUFBQSxnQkFFSUMsYUFBYSx1QkFBTUEsVUFGdkI7QUFBQSxnQkFHSUMsT0FBTyx1QkFBTUEsSUFIakI7O0FBS0EsbUJBQU8sZ0JBQU1WLGFBQU4sbUJBRUg7QUFDSUcsMEJBQVU7QUFDTkMsOEJBQVVuQixZQURKO0FBRU5vQixnQ0FBWTtBQUZOO0FBRGQsYUFGRyxFQVFILGdCQUFNTCxhQUFOLENBQ0ksSUFESixFQUVJO0FBQ0lHLDBCQUFVO0FBQ05DLDhCQUFVbkIsWUFESjtBQUVOb0IsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxVQVJKLENBUkcsRUFrQkgsZ0JBQU1MLGFBQU4seUJBRUk7QUFDSUcsMEJBQVU7QUFDTkMsOEJBQVVuQixZQURKO0FBRU5vQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLGdCQUFNTCxhQUFOLENBQ0lPLE1BREosRUFFSTtBQUNJSiwwQkFBVTtBQUNOQyw4QkFBVW5CLFlBREo7QUFFTm9CLGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksZ0JBQU1MLGFBQU4sQ0FDSVEsR0FESixFQUVJO0FBQ0lMLDBCQUFVO0FBQ05DLDhCQUFVbkIsWUFESjtBQUVOb0IsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxnQkFBTUwsYUFBTixDQUNJUyxVQURKLEVBRUk7QUFDSU4sMEJBQVU7QUFDTkMsOEJBQVVuQixZQURKO0FBRU5vQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLElBUkosQ0FSSixFQWtCSSxnQkFBTUwsYUFBTixDQUNJUyxVQURKLEVBRUk7QUFDSU4sMEJBQVU7QUFDTkMsOEJBQVVuQixZQURKO0FBRU5vQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLGFBUkosQ0FsQkosRUE0QkksZ0JBQU1MLGFBQU4sQ0FDSVMsVUFESixFQUVJO0FBQ0lOLDBCQUFVO0FBQ05DLDhCQUFVbkIsWUFESjtBQUVOb0IsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxRQVJKLENBNUJKLEVBc0NJLGdCQUFNTCxhQUFOLENBQ0lTLFVBREosRUFFSTtBQUNJTiwwQkFBVTtBQUNOQyw4QkFBVW5CLFlBREo7QUFFTm9CLGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksVUFSSixDQXRDSixFQWdESSxnQkFBTUwsYUFBTixDQUNJUyxVQURKLEVBRUk7QUFDSU4sMEJBQVU7QUFDTkMsOEJBQVVuQixZQURKO0FBRU5vQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLFNBUkosQ0FoREosQ0FSSixDQVJKLEVBNEVJLGdCQUFNTCxhQUFOLENBQ0lVLElBREosRUFFSTtBQUNJUCwwQkFBVTtBQUNOQyw4QkFBVW5CLFlBREo7QUFFTm9CLGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksS0FBS1osVUFBTCxFQVJKLENBNUVKLENBbEJHLEVBeUdILGdCQUFNTyxhQUFOLENBQ0ksS0FESixFQUVJO0FBQ0lHLDBCQUFVO0FBQ05DLDhCQUFVbkIsWUFESjtBQUVOb0IsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxRQVJKLEVBU0ksS0FBS1YsS0FBTCxDQUFXZ0IsWUFUZixFQVVJLFdBVkosQ0F6R0csQ0FBUDtBQXNISDtBQTlIRixLQWxCd0IsQ0FBM0IsRUFpSkksQ0FBQztBQUNEcEIsYUFBSyxpQkFESjtBQUVEQyxlQUFPLFlBQVk7QUFDZixnQkFBSW9CLE9BQU8saUNBQW1CLGFBQWEsc0JBQW9CQyxJQUFwQixDQUF5QixTQUFTQyxPQUFULENBQWlCbkIsS0FBakIsRUFBd0I7QUFDeEYsb0JBQUlPLE9BQUosRUFBYWEsUUFBYixFQUF1QkosWUFBdkIsRUFBcUNmLFFBQXJDO0FBQ0EsdUJBQU8sc0JBQW9Cb0IsSUFBcEIsQ0FBeUIsU0FBU0MsUUFBVCxDQUFrQkMsUUFBbEIsRUFBNEI7QUFDeEQsMkJBQU8sQ0FBUCxFQUFVO0FBQ04sZ0NBQVFBLFNBQVNDLElBQVQsR0FBZ0JELFNBQVNFLElBQWpDO0FBQ0ksaUNBQUssQ0FBTDtBQUNJbEIsMENBQVVQLE1BQU0wQixLQUFOLENBQVluQixPQUF0QjtBQUNBYSwyQ0FBVyx3QkFBU2IsT0FBVCxDQUFYO0FBQ0FnQix5Q0FBU0UsSUFBVCxHQUFnQixDQUFoQjtBQUNBLHVDQUFPTCxTQUFTTyxPQUFULENBQWlCQyxlQUFqQixHQUFtQ0MsSUFBbkMsRUFBUDs7QUFFSixpQ0FBSyxDQUFMO0FBQ0liLCtDQUFlTyxTQUFTTyxJQUF4QjtBQUNBUCx5Q0FBU0UsSUFBVCxHQUFnQixDQUFoQjtBQUNBLHVDQUFPLGtCQUFTTSxHQUFULENBQWFDLE1BQU1DLFNBQVNqQixZQUFULENBQU4sRUFBOEJrQixJQUE5QixHQUFxQ2hDLEdBQXJDLENBQXlDLFVBQVVpQyxPQUFWLEVBQW1CL0IsS0FBbkIsRUFBMEI7QUFDbkYsMkNBQU9nQixTQUFTTyxPQUFULENBQWlCMUIsUUFBakIsQ0FBMEJHLEtBQTFCLEVBQWlDeUIsSUFBakMsRUFBUDtBQUNILGlDQUZtQixDQUFiLENBQVA7O0FBSUosaUNBQUssQ0FBTDtBQUNJNUIsMkNBQVdzQixTQUFTTyxJQUFwQjtBQUNBLHVDQUFPUCxTQUFTYSxNQUFULENBQWdCLFFBQWhCLEVBQTBCLEVBQUU3QixTQUFTQSxPQUFYLEVBQW9CTixVQUFVQSxRQUE5QixFQUF3Q2UsY0FBY0EsWUFBdEQsRUFBMUIsQ0FBUDs7QUFFSixpQ0FBSyxDQUFMO0FBQ0EsaUNBQUssS0FBTDtBQUNJLHVDQUFPTyxTQUFTYyxJQUFULEVBQVA7QUFwQlI7QUFzQkg7QUFDSixpQkF6Qk0sRUF5QkpsQixPQXpCSSxFQXlCSyxJQXpCTCxDQUFQO0FBMEJILGFBNUIwQyxDQUFoQyxDQUFYOztBQThCQSxxQkFBU21CLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO0FBQ3pCLHVCQUFPdEIsS0FBS3ZCLEtBQUwsQ0FBVyxJQUFYLEVBQWlCQyxTQUFqQixDQUFQO0FBQ0g7O0FBRUQsbUJBQU8yQyxlQUFQO0FBQ0gsU0FwQ007QUFGTixLQUFELENBakpKOztBQTBMQSxXQUFPL0MsWUFBUDtBQUNILENBcE1rQixDQW9NakIsZ0JBQU1pRCxTQXBNVyxDQUFuQjs7a0JBc01lakQsWSIsImZpbGUiOiJ1bmtub3duIn0=